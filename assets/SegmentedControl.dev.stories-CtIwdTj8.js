import{d as a,j as r}from"./iframe-Cfz2vXeE.js";import{S as i,a as s,b as o}from"./SegmentedControl-DgLk0B8B.js";import{E as n,ay as l,i as p}from"./index.esm-C1WN7kEu.js";import"./preload-helper-D9Z9MdNV.js";import"./CounterLabel-DnnBMwbH.js";import"./VisuallyHidden-BShfgJrZ.js";import"./useFeatureFlag-paATTdb3.js";import"./Tooltip-BuVThTi0.js";import"./invariant-Dix8OlSS.js";import"./warning-CmA-h2kW.js";import"./_VisuallyHidden-CKJB9yD0.js";import"./useSafeTimeout-BD3cO5TN.js";import"./useProvidedRefOrCreate-Pg3blKRP.js";import"./KeybindingHint-C2Jv3TM3.js";import"./environment-DRRHKtsv.js";import"./user-agent-DiCyFeS1.js";import"./Text-BbpDCwQY.js";import"./useRefObjectAsForwardedRef-DQwuL9aT.js";import"./anchored-position-Cz4CQZsC.js";import"./index-C-OhZ25x.js";import"./Link-Dm7wEaum.js";import"./useSlots-BdLPLn0-.js";import"./Heading-Axc3-HQM.js";import"./useFocusZone-BvuuCBlY.js";import"./focus-zone-ZDpdvBtN.js";import"./event-listener-signal-Pp6mWBoo.js";import"./iterate-focusable-elements-QzROm7ZI.js";import"./BoxWithFallback-BKnPTtUo.js";import"./defaultSxProp-CTX1ZhUd.js";import"./constants-gM483c7h.js";import"./index.esm-BZRgk2PO.js";import"./index.esm-CN46I9JX.js";import"./Box-BgR2Y17o.js";import"./sx-BSyIY0hE.js";import"./Truncate-DUc3hzfC.js";import"./Spinner-CP1_WO7z.js";import"./index-D3vEWZM2.js";import"./Stack--yR6jd9X.js";import"./useRenderForcingRef-B3HiJhUh.js";import"./IconButton-qXcIkMuV.js";import"./ButtonBase-BlGPm-3t.js";import"./AriaStatus-CzZh6U-X.js";import"./Announce-rCuV3jiI.js";import"./Button-3sCteC9V.js";import"./useResponsiveValue-Cmf8jyBD.js";import"./ActionMenu-VmSenYrX.js";import"./useProvidedStateOrCreate-BEKIGSkE.js";import"./useMnemonics-D4gqZtvW.js";import"./AnchoredOverlay-DQ90Zw6u.js";import"./useFocusTrap-CL_Yl_fl.js";import"./useAnchoredPosition-IlJWxGCn.js";import"./useResizeObserver-CkcKl7_1.js";import"./useIsomorphicLayoutEffect-C_Bsqbyc.js";import"./Overlay-Du2pzphD.js";import"./Portal-BKCn1yDJ.js";import"./useOnOutsideClick-CaQvIa_9.js";const c=["variant"],go={title:"Components/SegmentedControl/Dev",component:o,subcomponents:{SegmentedControlButton:s,SegmentedControlIconButton:i},parameters:{controls:{exclude:c}}},t=()=>{const m=a.c(1);let e;return m[0]===Symbol.for("react.memo_cache_sentinel")?(e=r.jsxs(o,{"aria-label":"File view",className:"testCustomClassnameMono",children:[r.jsx(o.Button,{defaultSelected:!0,"aria-label":"Preview",leadingIcon:n,className:"testCustomClassnameColor",children:"Preview"}),r.jsx(o.Button,{"aria-label":"Raw",leadingIcon:l,className:"testCustomClassnameColor",children:"Raw"}),r.jsx(o.Button,{"aria-label":"Blame",leadingIcon:p,className:"testCustomClassnameColor",children:"Blame"})]}),m[0]=e):e=m[0],e};t.__docgenInfo={description:"",methods:[],displayName:"WithCss"};t.parameters={...t.parameters,docs:{...t.parameters?.docs,source:{originalSource:`() => <SegmentedControl aria-label="File view" className="testCustomClassnameMono">
    <SegmentedControl.Button defaultSelected aria-label={'Preview'} leadingIcon={EyeIcon} className="testCustomClassnameColor">
      Preview
    </SegmentedControl.Button>
    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon} className="testCustomClassnameColor">
      Raw
    </SegmentedControl.Button>
    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon} className="testCustomClassnameColor">
      Blame
    </SegmentedControl.Button>
  </SegmentedControl>`,...t.parameters?.docs?.source}}};const So=["WithCss"];export{t as WithCss,So as __namedExportsOrder,go as default};
