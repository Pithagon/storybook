import{d as D,r as N,R as L,b as G,j as z,c as K}from"./iframe-Cfz2vXeE.js";import{u as Q}from"./useIsomorphicLayoutEffect-C_Bsqbyc.js";import{g as J}from"./constants-gM483c7h.js";import{P as X}from"./Portal-BKCn1yDJ.js";import{u as Y}from"./useRefObjectAsForwardedRef-DQwuL9aT.js";import{u as Z}from"./useOnOutsideClick-CaQvIa_9.js";import{i as ee}from"./iterate-focusable-elements-QzROm7ZI.js";import{u as te}from"./Tooltip-BuVThTi0.js";import{u as oe}from"./useProvidedRefOrCreate-Pg3blKRP.js";import{u as se}from"./useFeatureFlag-paATTdb3.js";function re(l){const t=D.c(6),{initialFocusRef:e,returnFocusRef:s,containerRef:r,preventFocusOnOpen:i}=l;let n,a;t[0]!==r||t[1]!==e||t[2]!==i||t[3]!==s?(n=()=>{i||(e&&e.current?e.current.focus():r.current&&ee(r.current).next().value?.focus());const c=s.current;return function(){c?.focus()}},a=[e,s,r,i],t[0]=r,t[1]=e,t[2]=i,t[3]=s,t[4]=n,t[5]=a):(n=t[4],a=t[5]),N.useEffect(n,a)}const ie=l=>{const t=D.c(13),{overlayRef:e,returnFocusRef:s,initialFocusRef:r,onEscape:i,ignoreClickRefs:n,onClickOutside:a,preventFocusOnOpen:c}=l,o=oe(e);let p;t[0]!==r||t[1]!==o||t[2]!==c||t[3]!==s?(p={containerRef:o,returnFocusRef:s,initialFocusRef:r,preventFocusOnOpen:c},t[0]=r,t[1]=o,t[2]=c,t[3]=s,t[4]=p):p=t[4],re(p);let f;t[5]!==n||t[6]!==a||t[7]!==o?(f={containerRef:o,ignoreClickRefs:n,onClickOutside:a},t[5]=n,t[6]=a,t[7]=o,t[8]=f):f=t[8],Z(f);let u;t[9]!==i?(u=m=>{i(m),m.preventDefault()},t[9]=i,t[10]=u):u=t[10],te(u);let d;return t[11]!==o?(d={ref:o},t[11]=o,t[12]=d):d=t[12],d},ae="prc-Overlay-Overlay-dVyJl",ne={Overlay:ae},be={xsmall:"192px",small:"256px",medium:"320px",large:"432px",xlarge:"600px",auto:"auto",initial:"auto","fit-content":"fit-content"},le=200;function ce(l){return l?.endsWith("bottom")?{x:0,y:-1}:l?.endsWith("top")?{x:0,y:1}:l?.endsWith("right")?{x:-1,y:0}:l?.endsWith("left")?{x:1,y:0}:{x:0,y:0}}const M=L.forwardRef(({visibility:l,height:t,width:e,top:s,left:r,right:i,bottom:n,position:a,style:c,className:o,maxHeight:p,maxWidth:f,as:u="div",...h},d)=>z.jsx(u,{...h,ref:d,style:{left:r,right:i,top:s,bottom:n,position:a,...c},[`data-width-${e}`]:"",[`data-max-width-${f}`]:f?"":void 0,[`data-height-${t}`]:"",[`data-max-height-${p}`]:p?"":void 0,[`data-visibility-${l}`]:"",[`data-overflow-${h.overflow}`]:h.overflow?"":void 0,className:K(o,ne.Overlay)})),pe=L.forwardRef((l,t)=>{const e=D.c(51);let s,r,i,n,a,c,o,p,f,u,h,d,m,w,b,R,F;e[0]!==l?({anchorSide:s,height:m,ignoreClickRefs:r,initialFocusRef:i,left:n,onClickOutside:a,onEscape:c,portalContainerName:o,preventOverflow:w,preventFocusOnOpen:p,returnFocusRef:h,right:d,role:b,visibility:R,width:F,responsiveVariant:u,...f}=l,e[0]=l,e[1]=s,e[2]=r,e[3]=i,e[4]=n,e[5]=a,e[6]=c,e[7]=o,e[8]=p,e[9]=f,e[10]=u,e[11]=h,e[12]=d,e[13]=m,e[14]=w,e[15]=b,e[16]=R,e[17]=F):(s=e[1],r=e[2],i=e[3],n=e[4],a=e[5],c=e[6],o=e[7],p=e[8],f=e[9],u=e[10],h=e[11],d=e[12],m=e[13],w=e[14],b=e[15],R=e[16],F=e[17]);const y=m===void 0?"auto":m,U=w===void 0?!0:w,A=b===void 0?"none":b,g=R===void 0?"visible":R,S=F===void 0?"auto":F,v=N.useRef(null);Y(t,v);const{theme:O}=G();let E;e[18]!==O?(E=J("space.2")(O).replace("px",""),e[18]=O,e[19]=E):E=e[19];const k=parseInt(E);let C;e[20]!==O?(C=J("animation.easeOutCubic")(O),e[20]=O,e[21]=C):C=e[21];const $=C;let I;e[22]!==r||e[23]!==i||e[24]!==a||e[25]!==c||e[26]!==p||e[27]!==h?(I={overlayRef:v,returnFocusRef:h,onEscape:c,ignoreClickRefs:r,onClickOutside:a,initialFocusRef:i,preventFocusOnOpen:p},e[22]=r,e[23]=i,e[24]=a,e[25]=c,e[26]=p,e[27]=h,e[28]=I):I=e[28],ie(I);let P,V;e[29]!==y?(V=()=>{y==="initial"&&v.current?.clientHeight&&(v.current.style.height=`${v.current.clientHeight}px`)},P=[y],e[29]=y,e[30]=P,e[31]=V):(P=e[30],V=e[31]),N.useEffect(V,P);let j,q;e[32]!==s||e[33]!==k||e[34]!==$||e[35]!==g?(j=()=>{const{x:B,y:W}=ce(s);!B&&!W||!v.current?.animate||g==="hidden"||v.current.animate({transform:[`translate(${k*B}px, ${k*W}px)`,"translate(0, 0)"]},{duration:le,easing:$})},q=[s,k,$,g],e[32]=s,e[33]=k,e[34]=$,e[35]=g,e[36]=j,e[37]=q):(j=e[36],q=e[37]),Q(j,q);const T=n===void 0&&d===void 0?0:n,H=se("primer_react_overlay_overflow")||!U?!0:void 0;let x;e[38]!==y||e[39]!==T||e[40]!==f||e[41]!==u||e[42]!==d||e[43]!==A||e[44]!==H||e[45]!==g||e[46]!==S?(x=z.jsx(M,{role:A,width:S,"data-reflow-container":H,ref:v,left:T,right:d,height:y,visibility:g,"data-responsive":u,...f}),e[38]=y,e[39]=T,e[40]=f,e[41]=u,e[42]=d,e[43]=A,e[44]=H,e[45]=g,e[46]=S,e[47]=x):x=e[47];let _;return e[48]!==o||e[49]!==x?(_=z.jsx(X,{containerName:o,children:x}),e[48]=o,e[49]=x,e[50]=_):_=e[50],_});M.__docgenInfo={description:"An `Overlay` is a flexible floating surface, used to display transient content such as menus,\nselection options, dialogs, and more. Overlays use shadows to express elevation. The `Overlay`\ncomponent handles all behaviors needed by overlay UIs as well as the common styles that all overlays * should have.\n@param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n@param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.\n@param maxHeight Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n@param top Optional. Vertical top position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n@param left Optional. Horizontal left position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n@param right Optional. Horizontal right position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n@param bottom Optional. Vertical bottom position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n@param position Optional. Sets how an element is positioned in a document. Defaults to `absolute` positioning.",methods:[],displayName:"BaseOverlay",props:{as:{defaultValue:{value:"'div'",computed:!1},required:!1}}};pe.__docgenInfo={description:"@param anchorSide If provided, the Overlay will slide into position from the side of the anchor with a brief animation\n@param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n@param ignoreClickRefs Optional. An array of ref objects to ignore clicks on in the `onOutsideClick` behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the `Overlay` to prevent the `Overlay` from being toggled twice.\n@param initialFocusRef Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.\n@param left Optional. Horizontal left position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n@param onClickOutside  Required. Function to call when clicking outside of the `Overlay`. Typically this function removes the Overlay.\n@param onEscape Required. Function to call when user presses `Escape`. Typically this function removes the Overlay.\n@param portalContainerName Optional. The name of the portal container to render the Overlay into.\n@param preventOverflow Optional. The Overlay width will be adjusted responsively if there is not enough space to display the Overlay. If `preventOverflow` is `true`, the width of the `Overlay` will not be adjusted.\n@param preventFocusOnOpen Optional. If 'true', focus will not be applied when the component is first mounted, even if initialFocusRef prop is given.\n@param returnFocusRef Required. Ref for the element to focus when the `Overlay` is closed.\n@param right Optional. Horizontal right position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n@param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.",methods:[],displayName:"Overlay",props:{height:{defaultValue:{value:"'auto'",computed:!1},required:!1},preventOverflow:{defaultValue:{value:"true",computed:!1},required:!1},role:{defaultValue:{value:"'none'",computed:!1},required:!1},visibility:{defaultValue:{value:"'visible'",computed:!1},required:!1},width:{defaultValue:{value:"'auto'",computed:!1},required:!1}}};export{M as B,pe as O,be as h};
