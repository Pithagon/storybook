import{r as s,j as t}from"./iframe-Cfz2vXeE.js";import{_ as h}from"./index.esm-C1WN7kEu.js";import{c as b}from"./SelectPanel.stories.module-CD2T8TnF.js";import{a as m,F as a}from"./FormControl-qjqH6r5D.js";import{B as C}from"./Button-3sCteC9V.js";import"./preload-helper-D9Z9MdNV.js";import"./TextInputWrapper-A6-jRRIw.js";import"./index.esm-BZRgk2PO.js";import"./index.esm-CN46I9JX.js";import"./BoxWithFallback-BKnPTtUo.js";import"./defaultSxProp-CTX1ZhUd.js";import"./constants-gM483c7h.js";import"./Box-BgR2Y17o.js";import"./sx-BSyIY0hE.js";import"./index-C-OhZ25x.js";import"./Link-Dm7wEaum.js";import"./useRefObjectAsForwardedRef-DQwuL9aT.js";import"./useSlots-BdLPLn0-.js";import"./warning-CmA-h2kW.js";import"./_VisuallyHidden-CKJB9yD0.js";import"./invariant-Dix8OlSS.js";import"./Heading-Axc3-HQM.js";import"./useFocusZone-BvuuCBlY.js";import"./useProvidedRefOrCreate-Pg3blKRP.js";import"./focus-zone-ZDpdvBtN.js";import"./event-listener-signal-Pp6mWBoo.js";import"./user-agent-DiCyFeS1.js";import"./iterate-focusable-elements-QzROm7ZI.js";import"./Truncate-DUc3hzfC.js";import"./Tooltip-BuVThTi0.js";import"./useSafeTimeout-BD3cO5TN.js";import"./KeybindingHint-C2Jv3TM3.js";import"./environment-DRRHKtsv.js";import"./Text-BbpDCwQY.js";import"./anchored-position-Cz4CQZsC.js";import"./Spinner-CP1_WO7z.js";import"./VisuallyHidden-BShfgJrZ.js";import"./index-D3vEWZM2.js";import"./Stack--yR6jd9X.js";import"./useRenderForcingRef-B3HiJhUh.js";import"./IconButton-qXcIkMuV.js";import"./ButtonBase-BlGPm-3t.js";import"./AriaStatus-CzZh6U-X.js";import"./Announce-rCuV3jiI.js";import"./CounterLabel-DnnBMwbH.js";import"./InputLabel-BWKIqz-Q.js";import"./TextInput-hhRVe1zi.js";import"./FilteredActionList-Lzw7hr5X.js";import"./useProvidedStateOrCreate-BEKIGSkE.js";import"./SkeletonBox-ClHTzzEx.js";import"./useFeatureFlag-paATTdb3.js";import"./Checkbox-BHvnb8mU.js";import"./useIsomorphicLayoutEffect-C_Bsqbyc.js";import"./useAnchoredPosition-IlJWxGCn.js";import"./useResizeObserver-CkcKl7_1.js";import"./Overlay-Du2pzphD.js";import"./Portal-BKCn1yDJ.js";import"./useOnOutsideClick-CaQvIa_9.js";import"./Token-B_OnxjPX.js";import"./Textarea-DREKwwM3.js";import"./Octicon-B0A15aaM.js";import"./LinkButton-D-EvgNXE.js";import"./useResponsiveValue-Cmf8jyBD.js";import"./index-CEFMyGLK.js";import"./useMergedRefs-CMoMpGtu.js";import"./useMnemonics-D4gqZtvW.js";import"./AnchoredOverlay-DQ90Zw6u.js";import"./useFocusTrap-CL_Yl_fl.js";const Pe={title:"Components/SelectPanel",component:m};function e(r){return function(){return t.jsx("div",{className:b.ColorCircle,style:{backgroundColor:r,borderColor:r}})}}const l=[{leadingVisual:e("#a2eeef"),text:"enhancement",description:"New feature or request",descriptionVariant:"block",id:1},{leadingVisual:e("#d73a4a"),text:"bug",description:"Something isn't working",descriptionVariant:"block",id:2},{leadingVisual:e("#0cf478"),text:"good first issue",description:"Good for newcomers",descriptionVariant:"block",id:3},{leadingVisual:e("#ffd78e"),text:"design",id:4},{leadingVisual:e("#ff0000"),text:"blocker",id:5},{leadingVisual:e("#a4f287"),text:"backend",id:6},{leadingVisual:e("#8dc6fc"),text:"frontend",id:7}],o=()=>{const[r,p]=s.useState(l.slice(1,3)),[c,d]=s.useState(""),n=l.filter(i=>i.text?.toLowerCase().startsWith(c.toLowerCase())),[u,f]=s.useState(!1);return t.jsxs(a,{children:[t.jsx(a.Label,{children:"Labels"}),t.jsx(m,{title:"Select labels",placeholder:"Select labels",subtitle:"Use labels to organize issues and pull requests",renderAnchor:({children:i,...g})=>t.jsx(C,{trailingAction:h,...g,"aria-haspopup":"dialog",children:i}),open:u,onOpenChange:f,items:n,selected:r,onSelectedChange:p,onFilterChange:d,width:"medium",message:n.length===0?{variant:"empty",title:"No items available",body:""}:void 0})]})};o.__docgenInfo={description:"",methods:[],displayName:"Default"};o.parameters={...o.parameters,docs:{...o.parameters?.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<ItemInput[]>(items.slice(1, 3));
  const [filter, setFilter] = useState('');
  const filteredItems = items.filter(item => item.text?.toLowerCase().startsWith(filter.toLowerCase()));
  const [open, setOpen] = useState(false);
  return <FormControl>
      <FormControl.Label>Labels</FormControl.Label>
      <SelectPanel title="Select labels" placeholder="Select labels" // button text when no items are selected
    subtitle="Use labels to organize issues and pull requests" renderAnchor={({
      children,
      ...anchorProps
    }) => <Button trailingAction={TriangleDownIcon} {...anchorProps} aria-haspopup="dialog">
            {children}
          </Button>} open={open} onOpenChange={setOpen} items={filteredItems} selected={selected} onSelectedChange={setSelected} onFilterChange={setFilter} width="medium" message={filteredItems.length === 0 ? {
      variant: 'empty',
      title: 'No items available',
      body: ''
    } : undefined} />
    </FormControl>;
}`,...o.parameters?.docs?.source}}};const _e=["Default"];export{o as Default,_e as __namedExportsOrder,Pe as default};
