import{d as R,r as l,j as i}from"./iframe-Cfz2vXeE.js";import{X as x}from"./index.esm-C1WN7kEu.js";import{O as b}from"./Overlay-Du2pzphD.js";import{u as C}from"./useFocusTrap-CL_Yl_fl.js";import{T as k}from"./Text-BbpDCwQY.js";import{I as w}from"./IconButton-qXcIkMuV.js";import{B as T}from"./Button-3sCteC9V.js";import"./preload-helper-D9Z9MdNV.js";import"./useIsomorphicLayoutEffect-C_Bsqbyc.js";import"./constants-gM483c7h.js";import"./index.esm-BZRgk2PO.js";import"./index.esm-CN46I9JX.js";import"./Portal-BKCn1yDJ.js";import"./useRefObjectAsForwardedRef-DQwuL9aT.js";import"./useOnOutsideClick-CaQvIa_9.js";import"./iterate-focusable-elements-QzROm7ZI.js";import"./Tooltip-BuVThTi0.js";import"./invariant-Dix8OlSS.js";import"./warning-CmA-h2kW.js";import"./_VisuallyHidden-CKJB9yD0.js";import"./useSafeTimeout-BD3cO5TN.js";import"./useProvidedRefOrCreate-Pg3blKRP.js";import"./KeybindingHint-C2Jv3TM3.js";import"./environment-DRRHKtsv.js";import"./user-agent-DiCyFeS1.js";import"./anchored-position-Cz4CQZsC.js";import"./useFeatureFlag-paATTdb3.js";import"./event-listener-signal-Pp6mWBoo.js";import"./ButtonBase-BlGPm-3t.js";import"./sx-BSyIY0hE.js";import"./defaultSxProp-CTX1ZhUd.js";import"./Spinner-CP1_WO7z.js";import"./VisuallyHidden-BShfgJrZ.js";import"./AriaStatus-CzZh6U-X.js";import"./Announce-rCuV3jiI.js";import"./CounterLabel-DnnBMwbH.js";const B="prc-Overlay-FullHeightContent-3UeFR",F="prc-Overlay-CloseButtonOverlay-tOMuX",I="prc-Overlay-ResponsiveWidth-6l4Vg",v={FullHeightContent:B,CloseButtonOverlay:F,ResponsiveWidth:I},ue={title:"Private/Components/Overlay",component:b,argTypes:{anchorSide:{description:"If provided, the Overlay will slide into position from the side of the anchor with a brief animation",type:"string",table:{type:{summary:"'inside-top' | 'inside-bottom' | 'inside-left' | 'inside-right' | 'inside-center' | 'outside-top' | 'outside-bottom' | 'outside-left' | 'outside-right'"}}},bottom:{description:"Optional. Vertical bottom position of the overlay, relative to its closest positioned ancestor (often its `Portal`).",type:"string",table:{type:{summary:"string"}}},ignoreClickRefs:{description:"An array of ref objects to ignore clicks on in the onOutsideClick behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the Overlay to prevent the Overlay from being toggled twice.",type:"symbol",table:{type:{summary:"React.RefObject<HTMLElement>[]"}}},initialFocusRef:{description:"Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.",type:"symbol",table:{type:{summary:"React.RefObject<HTMLElement>"}}},height:{description:"Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.",type:"string",table:{type:{summary:"'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'auto'"}}},left:{description:"Optional. Horizontal left position of the overlay, relative to its closest positioned ancestor (often its `Portal`).",type:"string",table:{type:{summary:"string"}}},maxHeight:{description:"Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.",type:"string",table:{type:{summary:"'xsmall' | 'small' | 'medium' | 'large' | 'xlarge'"}}},maxWidth:{description:"Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.",type:"string",table:{type:{summary:"'xsmall' | 'small' | 'medium' | 'large' | 'xlarge'"}}},onClickOutside:{description:"Function to call when clicking outside of the `Overlay`. Typically this function sets the `Overlay` visibility state to `false`",type:"function",table:{type:{summary:"function"}}},onEscape:{description:"Function to call when user presses `Escape`. Typically this function sets the `Overlay` visibility state to `false`.",type:"function",table:{type:{summary:"function"}}},overflow:{description:"",type:"string",table:{type:{summary:"'auto' | 'hidden' | 'scroll' | 'visible'"}}},portalContainerName:{description:"If defined, Overlays will be rendered in the named portal.",type:"string",table:{type:{summary:"string"}}},position:{description:"Optional. Sets how an element is positioned in a document. Defaults to `absolute` positioning.",type:"string",table:{type:{summary:"string"},defaultValue:{summary:"absolute"}}},preventOverflow:{description:"Optional. The Overlay width will be adjusted responsively if there is not enough space to display the Overlay. If `preventOverflow` is `true`, the width of the `Overlay` will not be adjusted.",type:"boolean",table:{type:{summary:"boolean"}}},returnFocusRef:{description:"Ref for the element to focus when the `Overlay` is closed.",type:"symbol",table:{type:{summary:"React.RefObject<HTMLElement>"}}},right:{description:"Optional. Horizontal right position of the overlay, relative to its closest positioned ancestor (often its `Portal`).",type:"string",table:{type:{summary:"string"}}},role:{description:"The ARIA role to assign to the overlay.",type:"string",table:{type:{summary:"AriaRole"}}},top:{description:"Optional. Vertical top position of the overlay, relative to its closest positioned ancestor (often its `Portal`).",type:"string",table:{type:{summary:"string"}}},visibility:{description:"Sets the visibility of the `Overlay`.",type:"string",table:{type:{summary:"'visible' | 'hidden'"}}},width:{description:"Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.",type:"string",table:{type:{summary:"'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | 'auto'"}}},style:{table:{disable:!0}}}},d=n=>{const e=R.c(11),[t,y]=l.useState(!1),p=l.useRef(null),g=l.useRef(null),O=l.useRef(null);let r;e[0]===Symbol.for("react.memo_cache_sentinel")?(r=()=>y(!1),e[0]=r):r=e[0];const m=r,h=l.useRef(null),u=!t;let a;e[1]!==u?(a={containerRef:h,disabled:u},e[1]=u,e[2]=a):a=e[2],C(a);let o;e[3]!==t?(o=i.jsx(T,{ref:p,onClick:()=>{y(!t)},children:"Open overlay"}),e[3]=t,e[4]=o):o=e[4];let s;e[5]!==n.open||e[6]!==t?(s=t||n.open?i.jsx(b,{initialFocusRef:g,returnFocusRef:p,ignoreClickRefs:[p],onEscape:m,onClickOutside:m,width:"large",anchorSide:"inside-right",role:"dialog","aria-modal":"true","aria-label":"Sample overlay",ref:h,children:i.jsxs("div",{className:v.FullHeightContent,children:[i.jsx(w,{"aria-label":"Close",onClick:m,icon:x,variant:"invisible",className:v.CloseButtonOverlay}),i.jsx(k,{children:"Look! an overlay"})]})}):null,e[5]=n.open,e[6]=t,e[7]=s):s=e[7];let c;return e[8]!==o||e[9]!==s?(c=i.jsxs("div",{ref:O,children:[o,s]}),e[8]=o,e[9]=s,e[10]=c):c=e[10],c};d.args={open:!1};d.argTypes={open:{control:!1,visible:!1}};const f=n=>{const e=R.c(11),[t,y]=l.useState(!1),p=l.useRef(null),g=l.useRef(null),O=l.useRef(null);let r;e[0]===Symbol.for("react.memo_cache_sentinel")?(r=()=>y(!1),e[0]=r):r=e[0];const m=r,h=l.useRef(null),u=!t;let a;e[1]!==u?(a={containerRef:h,disabled:u},e[1]=u,e[2]=a):a=e[2],C(a);let o;e[3]!==t?(o=i.jsx(T,{ref:p,onClick:()=>{y(!t)},children:"Open overlay"}),e[3]=t,e[4]=o):o=e[4];let s;e[5]!==n||e[6]!==t?(s=t||n.open?i.jsx(b,{initialFocusRef:g,returnFocusRef:p,ignoreClickRefs:[p],onEscape:m,onClickOutside:m,width:n.width,height:n.height,"aria-modal":n.role==="dialog","aria-label":n.role==="dialog"?"Sample overlay":void 0,ref:h,...n,children:i.jsx("div",{className:v.ResponsiveWidth,children:i.jsxs("div",{className:v.FullHeightContent,children:[i.jsx(w,{"aria-label":"Close",onClick:m,icon:x,variant:"invisible",className:v.CloseButtonOverlay}),i.jsx(k,{children:"Look! an overlay"})]})})}):null,e[5]=n,e[6]=t,e[7]=s):s=e[7];let c;return e[8]!==o||e[9]!==s?(c=i.jsxs("div",{ref:O,children:[o,s]}),e[8]=o,e[9]=s,e[10]=c):c=e[10],c};f.args={width:"auto",height:"auto",side:"outside-bottom",preventOverflow:"false",role:"dialog",visibility:"visible",open:!1};f.argTypes={width:{type:{name:"enum",value:["small","medium","large","xlarge","xxlarge","auto"]}},height:{type:{name:"enum",value:["xsmall","small","medium","large","xlarge","auto","initial"]}},side:{type:{name:"enum",value:["inside-top","inside-bottom","inside-left","inside-right","inside-center","outside-top","outside-bottom","outside-left","outside-right"]}},open:{control:!1,visible:!1},portalContainerName:{control:!1},style:{control:!1},preventOverflow:{type:"boolean"},role:{type:"string"},visibility:{type:{name:"enum",value:["visible","hidden"]}}};d.__docgenInfo={description:"",methods:[],displayName:"Default"};f.__docgenInfo={description:"",methods:[],displayName:"Playground"};d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:`(args: Args) => {
  const [isOpen, setIsOpen] = useState(false);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const confirmButtonRef = useRef<HTMLButtonElement>(null);
  const anchorRef = useRef<HTMLDivElement>(null);
  const closeOverlay = () => setIsOpen(false);
  const containerRef = useRef<HTMLDivElement>(null);
  useFocusTrap({
    containerRef,
    disabled: !isOpen
  });
  return <div ref={anchorRef}>
      <Button ref={buttonRef} onClick={() => {
      setIsOpen(!isOpen);
    }}>
        Open overlay
      </Button>
      {isOpen || args.open ? <Overlay initialFocusRef={confirmButtonRef} returnFocusRef={buttonRef} ignoreClickRefs={[buttonRef]} onEscape={closeOverlay} onClickOutside={closeOverlay} width="large" anchorSide="inside-right" role="dialog" aria-modal="true" aria-label="Sample overlay" ref={containerRef}>
          <div className={classes.FullHeightContent}>
            <IconButton aria-label="Close" onClick={closeOverlay} icon={XIcon} variant="invisible" className={classes.CloseButtonOverlay} />
            <Text>Look! an overlay</Text>
          </div>
        </Overlay> : null}
    </div>;
}`,...d.parameters?.docs?.source}}};f.parameters={...f.parameters,docs:{...f.parameters?.docs,source:{originalSource:`(args: Args) => {
  const [isOpen, setIsOpen] = useState(false);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const confirmButtonRef = useRef<HTMLButtonElement>(null);
  const anchorRef = useRef<HTMLDivElement>(null);
  const closeOverlay = () => setIsOpen(false);
  const containerRef = useRef<HTMLDivElement>(null);
  useFocusTrap({
    containerRef,
    disabled: !isOpen
  });
  return <div ref={anchorRef}>
      <Button ref={buttonRef} onClick={() => {
      setIsOpen(!isOpen);
    }}>
        Open overlay
      </Button>
      {isOpen || args.open ? <Overlay initialFocusRef={confirmButtonRef} returnFocusRef={buttonRef} ignoreClickRefs={[buttonRef]} onEscape={closeOverlay} onClickOutside={closeOverlay} width={args.width} height={args.height} aria-modal={args.role === 'dialog'} aria-label={args.role === 'dialog' ? 'Sample overlay' : undefined} ref={containerRef} {...args}>
          <div className={classes.ResponsiveWidth}>
            <div className={classes.FullHeightContent}>
              <IconButton aria-label="Close" onClick={closeOverlay} icon={XIcon} variant="invisible" className={classes.CloseButtonOverlay} />
              <Text>Look! an overlay</Text>
            </div>
          </div>
        </Overlay> : null}
    </div>;
}`,...f.parameters?.docs?.source}}};const de=["Default","Playground"];export{d as Default,f as Playground,de as __namedExportsOrder,ue as default};
