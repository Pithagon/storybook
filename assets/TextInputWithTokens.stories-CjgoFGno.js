import{d as A,r as C,j as r}from"./iframe-Cfz2vXeE.js";import{t as j,b as F,a as _,f as L,c as W,g as K}from"./story-helpers-BdHCBPxk.js";import{T as v,F as x}from"./FormControl-qjqH6r5D.js";import"./preload-helper-D9Z9MdNV.js";import"./TextInputWrapper-A6-jRRIw.js";import"./index.esm-BZRgk2PO.js";import"./index.esm-CN46I9JX.js";import"./BoxWithFallback-BKnPTtUo.js";import"./defaultSxProp-CTX1ZhUd.js";import"./constants-gM483c7h.js";import"./Box-BgR2Y17o.js";import"./sx-BSyIY0hE.js";import"./index-C-OhZ25x.js";import"./Link-Dm7wEaum.js";import"./useRefObjectAsForwardedRef-DQwuL9aT.js";import"./useSlots-BdLPLn0-.js";import"./warning-CmA-h2kW.js";import"./_VisuallyHidden-CKJB9yD0.js";import"./invariant-Dix8OlSS.js";import"./Heading-Axc3-HQM.js";import"./useFocusZone-BvuuCBlY.js";import"./useProvidedRefOrCreate-Pg3blKRP.js";import"./focus-zone-ZDpdvBtN.js";import"./event-listener-signal-Pp6mWBoo.js";import"./user-agent-DiCyFeS1.js";import"./iterate-focusable-elements-QzROm7ZI.js";import"./Truncate-DUc3hzfC.js";import"./index.esm-C1WN7kEu.js";import"./Tooltip-BuVThTi0.js";import"./useSafeTimeout-BD3cO5TN.js";import"./KeybindingHint-C2Jv3TM3.js";import"./environment-DRRHKtsv.js";import"./Text-BbpDCwQY.js";import"./anchored-position-Cz4CQZsC.js";import"./Spinner-CP1_WO7z.js";import"./VisuallyHidden-BShfgJrZ.js";import"./index-D3vEWZM2.js";import"./Stack--yR6jd9X.js";import"./useRenderForcingRef-B3HiJhUh.js";import"./IconButton-qXcIkMuV.js";import"./ButtonBase-BlGPm-3t.js";import"./AriaStatus-CzZh6U-X.js";import"./Announce-rCuV3jiI.js";import"./CounterLabel-DnnBMwbH.js";import"./Button-3sCteC9V.js";import"./InputLabel-BWKIqz-Q.js";import"./TextInput-hhRVe1zi.js";import"./FilteredActionList-Lzw7hr5X.js";import"./useProvidedStateOrCreate-BEKIGSkE.js";import"./SkeletonBox-ClHTzzEx.js";import"./useFeatureFlag-paATTdb3.js";import"./Checkbox-BHvnb8mU.js";import"./useIsomorphicLayoutEffect-C_Bsqbyc.js";import"./useAnchoredPosition-IlJWxGCn.js";import"./useResizeObserver-CkcKl7_1.js";import"./Overlay-Du2pzphD.js";import"./Portal-BKCn1yDJ.js";import"./useOnOutsideClick-CaQvIa_9.js";import"./Token-B_OnxjPX.js";import"./Textarea-DREKwwM3.js";import"./Octicon-B0A15aaM.js";import"./LinkButton-D-EvgNXE.js";import"./useResponsiveValue-Cmf8jyBD.js";import"./index-CEFMyGLK.js";import"./useMergedRefs-CMoMpGtu.js";import"./useMnemonics-D4gqZtvW.js";import"./AnchoredOverlay-DQ90Zw6u.js";import"./useFocusTrap-CL_Yl_fl.js";const N="prc-TextInputWithTokens-LastKeyIndicator-ScPY3",D="prc-TextInputWithTokens-StoryContainer-CsWtS",I={LastKeyIndicator:N,StoryContainer:D},w=["tokens","onTokenRemove","tokenComponent",...j],Ut={title:"Deprecated/Components/TextInputWithTokens",component:v,parameters:{controls:{exclude:w}}},b=[{text:"zero",id:0},{text:"one",id:1},{text:"two",id:2},{text:"three",id:3},{text:"four",id:4},{text:"five",id:5},{text:"six",id:6},{text:"seven",id:7},{text:"twenty",id:20},{text:"twentyone",id:21}],p=e=>{const t=A.c(21);let o;t[0]!==e?(o=F(e),t[0]=e,t[1]=o):o=t[1];const{parentArgs:l,labelArgs:s,captionArgs:a,validationArgs:n}=o;let i;t[2]===Symbol.for("react.memo_cache_sentinel")?(i=[...b].slice(0,3),t[2]=i):i=t[2];const[m,y]=C.useState(i);let f;t[3]!==m?(f=R=>{y(m.filter(S=>S.id!==R))},t[3]=m,t[4]=f):f=t[4];const h=f;let c;t[5]!==s?(c=r.jsx(x.Label,{...s}),t[5]=s,t[6]=c):c=t[6];let d;t[7]!==e||t[8]!==h||t[9]!==m?(d=r.jsx(v,{...e,tokens:m,onTokenRemove:h}),t[7]=e,t[8]=h,t[9]=m,t[10]=d):d=t[10];let k;t[11]!==a?(k=a.children&&r.jsx(x.Caption,{...a}),t[11]=a,t[12]=k):k=t[12];let u;t[13]!==n?(u=n.children&&n.variant&&r.jsx(x.Validation,{...n,variant:n.variant}),t[13]=n,t[14]=u):u=t[14];let g;return t[15]!==l||t[16]!==c||t[17]!==d||t[18]!==k||t[19]!==u?(g=r.jsxs(x,{...l,children:[c,d,k,u]}),t[15]=l,t[16]=c,t[17]=d,t[18]=k,t[19]=u,t[20]=g):g=t[20],g};p.args={..._};p.argTypes={...K("TextInput props"),...W,...L};p.decorators=[e=>{const[t,o]=C.useState("none"),l=C.useCallback(s=>{o(s.key)},[]);return r.jsxs("div",{onKeyDownCapture:l,children:[r.jsxs("div",{className:I.LastKeyIndicator,children:["Last key pressed: ",t]}),r.jsx("div",{className:I.StoryContainer,children:r.jsx(e,{})})]})}];const T=()=>{const e=A.c(7);let t;e[0]===Symbol.for("react.memo_cache_sentinel")?(t=[...b].slice(0,3),e[0]=t):t=e[0];const[o,l]=C.useState(t);let s;e[1]!==o?(s=m=>{l(o.filter(y=>y.id!==m))},e[1]=o,e[2]=s):s=e[2];const a=s;let n;e[3]===Symbol.for("react.memo_cache_sentinel")?(n=r.jsx(x.Label,{children:"Default label"}),e[3]=n):n=e[3];let i;return e[4]!==a||e[5]!==o?(i=r.jsxs(x,{children:[n,r.jsx(v,{tokens:o,onTokenRemove:a})]}),e[4]=a,e[5]=o,e[6]=i):i=e[6],i};p.__docgenInfo={description:"",methods:[],displayName:"Playground",props:{labelChildren:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},captionChildren:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}};T.__docgenInfo={description:"",methods:[],displayName:"Default"};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:`(args: FormControlArgs<TextInputWithTokensProps>) => {
  const {
    parentArgs,
    labelArgs,
    captionArgs,
    validationArgs
  } = getFormControlArgsByChildComponent(args);
  const [tokens, setTokens] = useState([...mockTokens].slice(0, 3));
  const onTokenRemove: (tokenId: string | number) => void = tokenId => {
    setTokens(tokens.filter(token => token.id !== tokenId));
  };
  return <FormControl {...parentArgs}>
      <FormControl.Label {...labelArgs} />
      <TextInputWithTokens {...args} tokens={tokens} onTokenRemove={onTokenRemove} />
      {captionArgs.children && <FormControl.Caption {...captionArgs} />}
      {validationArgs.children && validationArgs.variant && <FormControl.Validation {...validationArgs} variant={validationArgs.variant} />}
    </FormControl>;
}`,...p.parameters?.docs?.source}}};T.parameters={...T.parameters,docs:{...T.parameters?.docs,source:{originalSource:`() => {
  const [tokens, setTokens] = useState([...mockTokens].slice(0, 3));
  const onTokenRemove: (tokenId: string | number) => void = tokenId => {
    setTokens(tokens.filter(token => token.id !== tokenId));
  };
  return <FormControl>
      <FormControl.Label>Default label</FormControl.Label>
      <TextInputWithTokens tokens={tokens} onTokenRemove={onTokenRemove} />
    </FormControl>;
}`,...T.parameters?.docs?.source}}};const Xt=["Playground","Default"];export{T as Default,p as Playground,Xt as __namedExportsOrder,Ut as default};
